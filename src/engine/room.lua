local room = {}
room.__index = room

function room.new(name, id)
	local self = setmetatable({}, room)
	
	self.name = name
	self.id = id
	self.pages = {}
	self.actions = {}
	
	-- default action "next" to move to the next page
	self.actions["next"] = function(data, game, plotVariables)
		game:nextPage()
		
		return game:getAllPages()
	end
	
	-- default action "previous" to move to the previous page
	self.actions["previous"] = function(data, game, plotVariables)
		game:previousPage()
		
		return game:getAllPages()
	end
	
	-- default action "go" to move to another room
	self.actions["go"] = function(data, game, plotVariables)
		game:changeRoom(data)
		
		return game:getAllPages()
	end
	
	return self
end

function room:getName()
	return self.name
end

function room:getID()
	return self.id
end

function room:addPage(page)
	-- replace previous page's previous pageLinks to include a next page link
	-- either (false, false) -> (false, true)
	-- or (true, false) -> (true, true)
	if #self.pages >= 1 then
		local lastPage = self.pages[#self.pages]
		
		if #self.pages == 1 then -- (false, false) i.e. no pageLinks exist
			lastPage:pageLinks(false, true)
		else -- (true, false)
			lastPage:removeLast(2) -- remove pagebottom and previous pageLink
			lastPage:pageLinks(true, true)
		end
		
		page:pageLinks(true, false)
	end
	
	table.insert(self.pages, page)
end

-- special actions:
-- enter(): run when room is entered. not defined by default
-- exit(): run when room is exited. not defined by default. only thing this is useful for is changing plot variables
-- next(): changes to next page. defined by default and assigned to autogenerated next page buttons
-- previous(): changes to previous page. defined by default and assigned to autogenerated previous page buttons
-- go(data): moves to the room with the ID data
function room:addAction(id, action)
	self.actions[id] = action
end

-- action must be returned and processed in game class because it needs access to plot variables as well as this room
function room:getAction(id)
	return self.actions[id]
end

function room:getCurrentPageNumber()
	return self.currentPage
end

function room:getAllPages()
	return self.pages
end

-- if action is not found returns noop function
function room:getAction(actionName)
	local defaultAction = function(data, game, plotVariables) -- default
		return game:getAllPages()
	end

	if self.actions[actionName] ~= nil then
		return self.actions[actionName]
	else
		return defaultAction
	end
end

return room